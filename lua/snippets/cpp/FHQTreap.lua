local ls = require("luasnip")

local s, t, i = ls.snippet, ls.text_node, ls.insert_node



return {

    s("FHQTreap", {

        t({

        "template<typename T>",
        "struct FHQTreap {",
        "    struct Node {",
        "        T val;",
        "        int pri, size;",
        "        int l, r;",
        "    };",
        "",
        "    vector<Node> tree;",
        "    int root = 0;",
        "    int tot = 0;",
        "    mt19937 rng{random_device{}()}; // 随机数生成器",
        "",
        "    FHQTreap() {",
        "        tree.push_back({}); // 哨兵，编号0表示null",
        "    }",
        "",
        "    int newNode(T val) {",
        "        tree.push_back({val, (int)rng(), 1, 0, 0});",
        "        return ++tot;",
        "    }",
        "",
        "    void pushUp(int x) {",
        "        tree[x].size = 1 + tree[tree[x].l].size + tree[tree[x].r].size;",
        "    }",
        "",
        "    void split(int now, const T &val, int &x, int &y) {",
        "        if (!now) x = y = 0;",
        "        else if (tree[now].val <= val) {",
        "            x = now;",
        "            split(tree[now].r, val, tree[now].r, y);",
        "            pushUp(x);",
        "        } else {",
        "            y = now;",
        "            split(tree[now].l, val, x, tree[now].l);",
        "            pushUp(y);",
        "        }",
        "    }",
        "",
        "    int merge(int x, int y) {",
        "        if (!x || !y) return x + y;",
        "        if (tree[x].pri > tree[y].pri) {",
        "            tree[x].r = merge(tree[x].r, y);",
        "            pushUp(x);",
        "            return x;",
        "        } else {",
        "            tree[y].l = merge(x, tree[y].l);",
        "            pushUp(y);",
        "            return y;",
        "        }",
        "    }",
        "",
        "    void insert(const T &val) {",
        "        int x, y;",
        "        split(root, val, x, y);",
        "        root = merge(merge(x, newNode(val)), y);",
        "    }",
        "",
        "    void erase(const T &val) {",
        "        int x, y, z;",
        "        split(root, val, x, z);",
        "        split(x, val - 1, x, y);",
        "        y = merge(tree[y].l, tree[y].r); // 删除一个 val",
        "        root = merge(merge(x, y), z);",
        "    }",
        "",
        "    T kth(int now, int k) {",
        "        while (now) {",
        "            int leftSize = tree[tree[now].l].size;",
        "            if (k <= leftSize) now = tree[now].l;",
        "            else if (k == leftSize + 1) return tree[now].val;",
        "            else k -= leftSize + 1, now = tree[now].r;",
        "        }",
        "        return T(); // 返回默认值（k 越界）",
        "    }",
        "",
        "    int rank(const T &val) {",
        "        int now = root, res = 0;",
        "        while (now) {",
        "            if (tree[now].val < val) {",
        "                res += tree[tree[now].l].size + 1;",
        "                now = tree[now].r;",
        "            } else {",
        "                now = tree[now].l;",
        "            }",
        "        }",
        "        return res + 1; // 1-based",
        "    }",
        "",
        "    T getMax(int x) {",
        "        while (tree[x].r) x = tree[x].r;",
        "        return tree[x].val;",
        "    }",
        "",
        "    T getMin(int x) {",
        "        while (tree[x].l) x = tree[x].l;",
        "        return tree[x].val;",
        "    }",
        "",
        "    T predecessor(const T &val) {",
        "        int x, y;",
        "        split(root, val - 1, x, y);",
        "        T res = x ? getMax(x) : T();",
        "        root = merge(x, y); // 还原",
        "        return res;",
        "    }",
        "",
        "    T successor(const T &val) {",
        "        int x, y;",
        "        split(root, val, x, y);",
        "        T res = y ? getMin(y) : T();",
        "        root = merge(x, y); // 还原",
        "        return res;",
        "    }",
        "};"

        }), i(1)

    }),

}

